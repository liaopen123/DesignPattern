apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.qidongyinqing.www.designpattern"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(path: ':apt_annotation')
    implementation project(':apt_library')
    annotationProcessor project(':apt_processor')
    implementation project(path: ':multi_thread')
}


gradle.addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {
        println("开始构建.....")
    }

    @Override
    void settingsEvaluated(Settings settings) {
        println("setting文件解析完成.....")
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        println("项目加载完成.....")

        gradle.rootProject.subprojects.each {
            pro ->
                pro.beforeEvaluate {
                    println("${pro.name} 项目配置之前调用")
                }
                pro.afterEvaluate {
                    println("${pro.name} 项目配置之后调用")
                }

        }
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println("项目解析完成.....")
    }

    @Override
    void buildFinished(BuildResult result) {
        println("构建完成.....")
    }
})

gradle.taskGraph.whenReady {
    println("task 图构建完成")
}
gradle.taskGraph.beforeTask {
    println("每个 task 执行前会调这个接口")
}
gradle.taskGraph.afterTask {
    println("每个 task 执行完成会调这个接口")
}
